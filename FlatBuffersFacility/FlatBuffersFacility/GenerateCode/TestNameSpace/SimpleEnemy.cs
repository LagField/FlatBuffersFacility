// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TestNameSpace
{

using global::System;
using global::FlatBuffers;

public struct SimpleEnemy : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SimpleEnemy GetRootAsSimpleEnemy(ByteBuffer _bb) { return GetRootAsSimpleEnemy(_bb, new SimpleEnemy()); }
  public static SimpleEnemy GetRootAsSimpleEnemy(ByteBuffer _bb, SimpleEnemy obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SimpleEnemy __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public string Name(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NameLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SimpleEnemy> CreateSimpleEnemy(FlatBufferBuilder builder,
      double id = 0.0,
      VectorOffset nameOffset = default(VectorOffset)) {
    builder.StartObject(2);
    SimpleEnemy.AddId(builder, id);
    SimpleEnemy.AddName(builder, nameOffset);
    return SimpleEnemy.EndSimpleEnemy(builder);
  }

  public static void StartSimpleEnemy(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddId(FlatBufferBuilder builder, double id) { builder.AddDouble(0, id, 0.0); }
  public static void AddName(FlatBufferBuilder builder, VectorOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static VectorOffset CreateNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SimpleEnemy> EndSimpleEnemy(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SimpleEnemy>(o);
  }
};


}
